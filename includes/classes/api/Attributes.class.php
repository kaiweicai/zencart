<?phpclass Attributes extends ApiBase {	/**	 * list all attribute	 *	 * @param string $info	 * @return string	 */	public static function attribute_list($info) {		$db = parent::prepare_db();		$info = parent::prepare_input($info);		$return = array();				$products_id = $info['products_id'];				//设置分页		$page = 1;		$perpage = PHP_INT_MAX;		if(isset($info['page'])) {			$page = intval($info['page']);		}		if(isset($info['perpage'])) {			$perpage = intval($info['perpage']);		}		$limit = " LIMIT " . (($page - 1) * $perpage) . ", {$perpage}";				$attributes = "select pa.*						from (" . TABLE_PRODUCTS_ATTRIBUTES . " pa						left join " . TABLE_PRODUCTS_DESCRIPTION . " pd						on pa.products_id = pd.products_id						and pd.language_id = '" . (int)$_SESSION['languages_id'] . "'						left join " . TABLE_PRODUCTS_OPTIONS . " po						on pa.options_id = po.products_options_id						and po.language_id = '" . (int)$_SESSION['languages_id'] . "'" . ")						where pa.products_id ='" . $products_id . "'						order by pd.products_name, LPAD(po.products_options_sort_order,11,'0'), LPAD(pa.options_id,11,'0'), LPAD(pa.products_options_sort_order,11,'0')" . $limit;		$attributes_values = $db->Execute($attributes);		while (!$attributes_values->EOF) {			$item['products_attributes_id'] = $attributes_values->fields['products_attributes_id'];			$item['products_id'] = $attributes_values->fields['products_id'];			$item['options_id'] = $attributes_values->fields['options_id'];			$item['options_values_id'] = $attributes_values->fields['options_values_id'];			$item['options_values_price'] = $attributes_values->fields['options_values_price'];			$item['price_prefix'] = $attributes_values->fields['price_prefix'];			$item['products_options_sort_order'] = $attributes_values->fields['products_options_sort_order'];			$item['product_attribute_is_free'] = $attributes_values->fields['product_attribute_is_free'] ? 'true' : 'false';			$item['products_attributes_weight'] = $attributes_values->fields['products_attributes_weight'];			$item['products_attributes_weight_prefix'] = $attributes_values->fields['products_attributes_weight_prefix'];			$item['attributes_display_only'] = $attributes_values->fields['attributes_display_only'] ? 'true' : 'false';			$item['attributes_default'] = $attributes_values->fields['attributes_default'] ? 'true' : 'false';			$item['attributes_discounted'] = $attributes_values->fields['attributes_discounted'] ? 'true' : 'false';			$item['attributes_image'] = $attributes_values->fields['attributes_image'] != '' ? DIR_WS_CATALOG_IMAGES . $attributes_values->fields['attributes_image'] : '';			$item['attributes_price_base_included'] = $attributes_values->fields['attributes_price_base_included'] ? 'true' : 'false';			$item['attributes_price_onetime'] = $attributes_values->fields['attributes_price_onetime'];			$item['attributes_price_factor'] = $attributes_values->fields['attributes_price_factor'];			$item['attributes_price_factor_offset'] = $attributes_values->fields['attributes_price_factor_offset'];			$item['attributes_price_factor_onetime'] = $attributes_values->fields['attributes_price_factor_onetime'];			$item['attributes_price_factor_onetime_offset'] = $attributes_values->fields['attributes_price_factor_onetime_offset'];			$item['attributes_qty_prices'] = $attributes_values->fields['attributes_qty_prices'];			$item['attributes_qty_prices_onetime'] = $attributes_values->fields['attributes_qty_prices_onetime'];			$item['attributes_price_words'] = $attributes_values->fields['attributes_price_words'];			$item['attributes_price_words_free'] = $attributes_values->fields['attributes_price_words_free'];			$item['attributes_price_letters'] = $attributes_values->fields['attributes_price_letters'];			$item['attributes_price_letters_free'] = $attributes_values->fields['attributes_price_letters_free'];			$item['attributes_required'] = $attributes_values->fields['attributes_required'] ? 'true' : 'false';						$return[] = $item;			$attributes_values->MoveNext();		}				return parent::prepare_output($return);	}		/**	 * get a attribute's information	 *	 * @param string $products_attributes_id	 * @return string	 */	public static function attribute_list_id($products_attributes_id) {		$db = parent::prepare_db();		$products_attributes_id = parent::prepare_input($products_attributes_id);		$products_attributes_id = $products_attributes_id[0];		$return = array();						$attributes = "select pa.*, pd.products_name, po.products_options_name,						pad.products_attributes_filename, pad.products_attributes_maxdays, pad.products_attributes_maxcount						from (" . TABLE_PRODUCTS_ATTRIBUTES . " pa						left join " . TABLE_PRODUCTS_DESCRIPTION . " pd						on pa.products_id = pd.products_id						and pd.language_id = '" . (int)$_SESSION['languages_id'] . "'						left join " . TABLE_PRODUCTS_OPTIONS . " po						on pa.options_id = po.products_options_id						and po.language_id = '" . (int)$_SESSION['languages_id'] . "'" . "						left join " . TABLE_PRODUCTS_ATTRIBUTES_DOWNLOAD . " pad						on pad.products_attributes_id = pa.products_attributes_id)						where pa.products_attributes_id ='" . $products_attributes_id . "'						order by pd.products_name, LPAD(po.products_options_sort_order,11,'0'), LPAD(pa.options_id,11,'0'), LPAD(pa.products_options_sort_order,11,'0')";		file_put_contents(DIR_FS_CATALOG . 'apilog.txt', $attributes);		$attributes_values = $db->Execute($attributes);		if(!$attributes_values->EOF) {			$return['products_attributes_id'] = $attributes_values->fields['products_attributes_id'];			$return['products_id'] = $attributes_values->fields['products_id'];			$return['options_id'] = $attributes_values->fields['options_id'];			$return['options_values_id'] = $attributes_values->fields['options_values_id'];			$return['options_values_price'] = $attributes_values->fields['options_values_price'];			$return['price_prefix'] = $attributes_values->fields['price_prefix'];			$return['products_options_sort_order'] = $attributes_values->fields['products_options_sort_order'];			$return['product_attribute_is_free'] = $attributes_values->fields['product_attribute_is_free'] ? 'true' : 'false';			$return['products_attributes_weight'] = $attributes_values->fields['products_attributes_weight'];			$return['products_attributes_weight_prefix'] = $attributes_values->fields['products_attributes_weight_prefix'];			$return['attributes_display_only'] = $attributes_values->fields['attributes_display_only'] ? 'true' : 'false';			$return['attributes_default'] = $attributes_values->fields['attributes_default'] ? 'true' : 'false';			$return['attributes_discounted'] = $attributes_values->fields['attributes_discounted'] ? 'true' : 'false';			$return['attributes_image'] = $attributes_values->fields['attributes_image'] != '' ? DIR_WS_CATALOG_IMAGES . $attributes_values->fields['attributes_image'] : '';			$return['attributes_price_base_included'] = $attributes_values->fields['attributes_price_base_included'] ? 'true' : 'false';			$return['attributes_price_onetime'] = $attributes_values->fields['attributes_price_onetime'];			$return['attributes_price_factor'] = $attributes_values->fields['attributes_price_factor'];			$return['attributes_price_factor_offset'] = $attributes_values->fields['attributes_price_factor_offset'];			$return['attributes_price_factor_onetime'] = $attributes_values->fields['attributes_price_factor_onetime'];			$return['attributes_price_factor_onetime_offset'] = $attributes_values->fields['attributes_price_factor_onetime_offset'];			$return['attributes_qty_prices'] = $attributes_values->fields['attributes_qty_prices'];			$return['attributes_qty_prices_onetime'] = $attributes_values->fields['attributes_qty_prices_onetime'];			$return['attributes_price_words'] = $attributes_values->fields['attributes_price_words'];			$return['attributes_price_words_free'] = $attributes_values->fields['attributes_price_words_free'];			$return['attributes_price_letters'] = $attributes_values->fields['attributes_price_letters'];			$return['attributes_price_letters_free'] = $attributes_values->fields['attributes_price_letters_free'];			$return['attributes_required'] = $attributes_values->fields['attributes_required'] ? 'true' : 'false';			$return['products_name'] = $attributes_values->fields['products_name'];			$return['products_options_name'] = $attributes_values->fields['products_options_name'];			$return['img_dir'] = $attributes_values->fields['attributes_image'] != '' ? substr($attributes_values->fields['attributes_image'], 0, strpos( $attributes_values->fields['attributes_image'], '/') + 1) : 'attributes/';			$return['products_attributes_filename'] = $attributes_values->fields['products_attributes_filename'];			$return['products_attributes_maxdays'] = $attributes_values->fields['products_attributes_maxdays'];			$return['products_attributes_maxcount'] = $attributes_values->fields['products_attributes_maxcount'];		}				return parent::prepare_output($return);	}		/**	 * add a new attribute	 *	 * @param string $info	 * @return string	 */	public static function attribute_add($info) {		$db = parent::prepare_db();		$info = parent::prepare_input($info);		$return = array();				$current_image_name = '';		for ($i=0; $i<sizeof($info['values_id']); $i++) {			// check for duplicate and block them			$check_duplicate = $db->Execute("select * from " . TABLE_PRODUCTS_ATTRIBUTES . "											where products_id ='" . $info['products_id'] . "'											and options_id = '" . $info['options_id'] . "'											and options_values_id = '" . $info['values_id'][$i] . "'");			if ($check_duplicate->RecordCount() > 0) {				// do not add duplicates -- give a warning				//$messageStack->add_session(ATTRIBUTE_WARNING_DUPLICATE . ' - ' . zen_options_name($_POST['options_id']) . ' : ' . zen_values_name($_POST['values_id'][$i]), 'error');				return ErrCode::error(API_ATTRIBUTE_WARNING_DUPLICATE);			} else {				// For TEXT and FILE option types, ignore option value entered by administrator and use PRODUCTS_OPTIONS_VALUES_TEXT instead.				$products_options_array = $db->Execute("select products_options_type from " . TABLE_PRODUCTS_OPTIONS . " where products_options_id = '" . $info['options_id'] . "'");				$values_id = zen_db_prepare_input((($products_options_array->fields['products_options_type'] == PRODUCTS_OPTIONS_TYPE_TEXT) or ($products_options_array->fields['products_options_type'] == PRODUCTS_OPTIONS_TYPE_FILE)) ? PRODUCTS_OPTIONS_VALUES_TEXT_ID : $info['values_id'][$i]);								$products_id = zen_db_prepare_input($info['products_id']);				$options_id = zen_db_prepare_input($info['options_id']);				//            $values_id = zen_db_prepare_input($_POST['values_id'][$i]);				$value_price = zen_db_prepare_input($info['value_price']);				$price_prefix = zen_db_prepare_input($info['price_prefix']);								$products_options_sort_order = zen_db_prepare_input($info['products_options_sort_order']);								// modified options sort order to use default if not otherwise set				if (zen_not_null($info['products_options_sort_order'])) {					$products_options_sort_order = zen_db_prepare_input($info['products_options_sort_order']);				} else {					$sort_order_query = $db->Execute("select products_options_values_sort_order from " . TABLE_PRODUCTS_OPTIONS_VALUES . " where products_options_values_id = '" . $info['values_id'][$i] . "'");					$products_options_sort_order = $sort_order_query->fields['products_options_values_sort_order'];				} // end if (zen_not_null($_POST['products_options_sort_order'])								// end modification for sort order								$product_attribute_is_free = $info['product_attribute_is_free'] == 'true' ? 1 : 0;				$products_attributes_weight = zen_db_prepare_input($info['products_attributes_weight']);				$products_attributes_weight_prefix = zen_db_prepare_input($info['products_attributes_weight_prefix']);				$attributes_display_only = $info['attributes_display_only'] == 'true' ? 1 : 0;				$attributes_default = $info['attributes_default'] == 'true' ? 1 : 0;				$attributes_discounted = $info['attributes_discounted'] == 'true' ? 1 : 0;				$attributes_price_base_included = $info['attributes_price_base_included'] == 'true' ? 1 : 0;								$attributes_price_onetime = zen_db_prepare_input($info['attributes_price_onetime']);				$attributes_price_factor = zen_db_prepare_input($info['attributes_price_factor']);				$attributes_price_factor_offset = zen_db_prepare_input($info['attributes_price_factor_offset']);				$attributes_price_factor_onetime = zen_db_prepare_input($info['attributes_price_factor_onetime']);				$attributes_price_factor_onetime_offset = zen_db_prepare_input($info['attributes_price_factor_onetime_offset']);				$attributes_qty_prices = zen_db_prepare_input($info['attributes_qty_prices']);				$attributes_qty_prices_onetime = zen_db_prepare_input($info['attributes_qty_prices_onetime']);								$attributes_price_words = zen_db_prepare_input($info['attributes_price_words']);				$attributes_price_words_free = zen_db_prepare_input($info['attributes_price_words_free']);				$attributes_price_letters = zen_db_prepare_input($info['attributes_price_letters']);				$attributes_price_letters_free = zen_db_prepare_input($info['attributes_price_letters_free']);				$attributes_required = $info['attributes_required'] == 'true' ? 1 : 0;								// add - update as record exists				// attributes images				// when set to none remove from database				// only processes image once for multiple selection of options_values_id				if ($i == 0) {					/*if (isset($info['attributes_image']) && zen_not_null($info['attributes_image']) && ($info['attributes_image'] != 'none')) {						$attributes_image = zen_db_prepare_input($info['attributes_image']);					} else {						$attributes_image = '';					}*/										$attributes_image = new upload('attributes_image');					$attributes_image->set_destination(DIR_FS_CATALOG_IMAGES . $info['img_dir']);					if ($attributes_image->parse() && $attributes_image->save($info['overwrite'] == 'true' ? 1 : 0)) {						$attributes_image_name = $info['img_dir'] . $attributes_image->filename;					} else {						$attributes_image_name = '';					}					$current_image_name = $attributes_image_name;				} else {					$attributes_image_name = $current_image_name;				}								$db->Execute("insert into " . TABLE_PRODUCTS_ATTRIBUTES . " (products_attributes_id, products_id, options_id, options_values_id, options_values_price, price_prefix, products_options_sort_order, product_attribute_is_free, products_attributes_weight, products_attributes_weight_prefix, attributes_display_only, attributes_default, attributes_discounted, attributes_image, attributes_price_base_included, attributes_price_onetime, attributes_price_factor, attributes_price_factor_offset, attributes_price_factor_onetime, attributes_price_factor_onetime_offset, attributes_qty_prices, attributes_qty_prices_onetime, attributes_price_words, attributes_price_words_free, attributes_price_letters, attributes_price_letters_free, attributes_required)							values (0,							'" . (int)$products_id . "',							'" . (int)$options_id . "',							'" . (int)$values_id . "',							'" . (float)zen_db_input($value_price) . "',							'" . zen_db_input($price_prefix) . "',							'" . (int)zen_db_input($products_options_sort_order) . "',							'" . (int)zen_db_input($product_attribute_is_free) . "',							'" . (float)zen_db_input($products_attributes_weight) . "',							'" . zen_db_input($products_attributes_weight_prefix) . "',							'" . (int)zen_db_input($attributes_display_only) . "',							'" . (int)zen_db_input($attributes_default) . "',							'" . (int)zen_db_input($attributes_discounted) . "',							'" . zen_db_input($attributes_image_name) . "',							'" . (int)zen_db_input($attributes_price_base_included) . "',							'" . (float)zen_db_input($attributes_price_onetime) . "',							'" . (float)zen_db_input($attributes_price_factor) . "',							'" . (float)zen_db_input($attributes_price_factor_offset) . "',							'" . (float)zen_db_input($attributes_price_factor_onetime) . "',							'" . (float)zen_db_input($attributes_price_factor_onetime_offset) . "',							'" . zen_db_input($attributes_qty_prices) . "',							'" . zen_db_input($attributes_qty_prices_onetime) . "',							'" . (float)zen_db_input($attributes_price_words) . "',							'" . (int)zen_db_input($attributes_price_words_free) . "',							'" . (float)zen_db_input($attributes_price_letters) . "',							'" . (int)zen_db_input($attributes_price_letters_free) . "',							'" . (int)zen_db_input($attributes_required) . "')");								if (DOWNLOAD_ENABLED == 'true') {					$products_attributes_id = $db->Insert_ID();										$products_attributes_filename = zen_db_prepare_input($info['products_attributes_filename']);					$products_attributes_maxdays = (int)zen_db_prepare_input($info['products_attributes_maxdays']);					$products_attributes_maxcount = (int)zen_db_prepare_input($info['products_attributes_maxcount']);										//die( 'I am adding ' . strlen($_POST['products_attributes_filename']) . ' vs ' . strlen(trim($_POST['products_attributes_filename'])) . ' vs ' . strlen(zen_db_prepare_input($_POST['products_attributes_filename'])) . ' vs ' . strlen(zen_db_input($products_attributes_filename)) );					if (zen_not_null($products_attributes_filename)) {						$db->Execute("insert into " . TABLE_PRODUCTS_ATTRIBUTES_DOWNLOAD . "									(products_attributes_id, products_attributes_filename, products_attributes_maxdays, products_attributes_maxcount)									values (" . (int)$products_attributes_id . ",									'" . zen_db_input($products_attributes_filename) . "',									'" . zen_db_input($products_attributes_maxdays) . "',									'" . zen_db_input($products_attributes_maxcount) . "')");					}				}			}		}				// reset products_price_sorter for searches etc.		zen_update_products_price_sorter($info['products_id']);				$return[] = '1';		return parent::prepare_output($return);	}		/**	 * Enter description here...	 *	 * @param unknown_type $info	 * @return unknown	 */	public static function attribute_update($info) {		$db = parent::prepare_db();		$info = parent::prepare_input($info);		$return = array();				$check_duplicate = $db->Execute("select * from " . TABLE_PRODUCTS_ATTRIBUTES . "										where products_id ='" . $info['products_id'] . "'										and options_id = '" . $info['options_id'] . "'										and options_values_id = '" . $info['values_id'] . "'										and products_attributes_id != '" . $info['attribute_id'] . "'");				if ($check_duplicate->RecordCount() > 0) {			// do not add duplicates give a warning			//$messageStack->add_session(ATTRIBUTE_WARNING_DUPLICATE_UPDATE . ' - ' . zen_options_name($info['options_id']) . ' : ' . zen_values_name($info['values_id']), 'error');			return ErrCode::error(API_ATTRIBUTE_WARNING_DUPLICATE_UPDATE);		} else {			// Validate options_id and options_value_id			if (!zen_validate_options_to_options_value($info['options_id'], $info['values_id'])) {				// do not add invalid match				//$messageStack->add_session(ATTRIBUTE_WARNING_INVALID_MATCH_UPDATE . ' - ' . zen_options_name($info['options_id']) . ' : ' . zen_values_name($_POST['values_id']), 'error');				return ErrCode::error(API_ATTRIBUTE_WARNING_INVALID_MATCH_UPDATE);			} else {				// add the new attribute				// iii 030811 added:  Enforce rule that TEXT and FILE Options use value PRODUCTS_OPTIONS_VALUES_TEXT_ID				$products_options_query = $db->Execute("select products_options_type from " . TABLE_PRODUCTS_OPTIONS . " where products_options_id = '" . $info['options_id'] . "'");				switch ($products_options_array->fields['products_options_type']) {					case PRODUCTS_OPTIONS_TYPE_TEXT:					case PRODUCTS_OPTIONS_TYPE_FILE:						$values_id = PRODUCTS_OPTIONS_VALUES_TEXT_ID;						break;					default:						$values_id = zen_db_prepare_input($info['values_id']);				}				// iii 030811 added END								$products_id = zen_db_prepare_input($info['products_id']);				$options_id = zen_db_prepare_input($info['options_id']);				//            $values_id = zen_db_prepare_input($_POST['values_id']);				$value_price = zen_db_prepare_input($info['value_price']);				$price_prefix = zen_db_prepare_input($info['price_prefix']);								$products_options_sort_order = zen_db_prepare_input($info['products_options_sort_order']);				$product_attribute_is_free = $info['product_attribute_is_free'] == 'true' ? 1 : 0;				$products_attributes_weight = zen_db_prepare_input($info['products_attributes_weight']);				$products_attributes_weight_prefix = zen_db_prepare_input($info['products_attributes_weight_prefix']);				$attributes_display_only = $info['attributes_display_only'] == 'true' ? 1 : 0;				$attributes_default = $info['attributes_default'] == 'true' ? 1 : 0;				$attributes_discounted = $info['attributes_discounted'] == 'true' ? 1 : 0;				$attributes_price_base_included = $info['attributes_price_base_included'] == 'true' ? 1 : 0;								$attributes_price_onetime = zen_db_prepare_input($info['attributes_price_onetime']);				$attributes_price_factor = zen_db_prepare_input($info['attributes_price_factor']);				$attributes_price_factor_offset = zen_db_prepare_input($info['attributes_price_factor_offset']);				$attributes_price_factor_onetime = zen_db_prepare_input($info['attributes_price_factor_onetime']);				$attributes_price_factor_onetime_offset = zen_db_prepare_input($info['attributes_price_factor_onetime_offset']);				$attributes_qty_prices = zen_db_prepare_input($info['attributes_qty_prices']);				$attributes_qty_prices_onetime = zen_db_prepare_input($info['attributes_qty_prices_onetime']);								$attributes_price_words = zen_db_prepare_input($info['attributes_price_words']);				$attributes_price_words_free = zen_db_prepare_input($info['attributes_price_words_free']);				$attributes_price_letters = zen_db_prepare_input($info['attributes_price_letters']);				$attributes_price_letters_free = zen_db_prepare_input($info['attributes_price_letters_free']);				$attributes_required = $info['attributes_required'] == 'true' ? 1 : 0;								$attribute_id = zen_db_prepare_input($info['attribute_id']);								// edit				// attributes images				// when set to none remove from database				/*if (isset($info['attributes_image']) && zen_not_null($info['attributes_image']) && ($info['attributes_image'] != 'none')) {					$attributes_image = zen_db_prepare_input($info['attributes_image']);					$attributes_image_none = false;				} else {					$attributes_image = '';					$attributes_image_none = true;				}*/								$attributes_image = new upload('attributes_image');				$attributes_image->set_destination(DIR_FS_CATALOG_IMAGES . $info['img_dir']);				if ($attributes_image->parse() && $attributes_image->save($info['overwrite'] == 'true' ? 1 : 0)) {					$attributes_image_name = ($attributes_image->filename != 'none' ? ($info['img_dir'] . $attributes_image->filename) : '');				} else {					$attributes_image_name = isset($info['attributes_previous_image']) ? $info['attributes_previous_image'] : '';				}								if ($info['image_delete'] == 'true') {					$attributes_image_name = '';				}				// turned off until working				$db->Execute("update " . TABLE_PRODUCTS_ATTRIBUTES . "							set attributes_image = '" .  $attributes_image_name . "'							where products_attributes_id = '" . (int)$attribute_id . "'");								$db->Execute("update " . TABLE_PRODUCTS_ATTRIBUTES . "							set products_id = '" . (int)$products_id . "',							options_id = '" . (int)$options_id . "',							options_values_id = '" . (int)$values_id . "',							options_values_price = '" . zen_db_input($value_price) . "',							price_prefix = '" . zen_db_input($price_prefix) . "',							products_options_sort_order = '" . zen_db_input($products_options_sort_order) . "',							product_attribute_is_free = '" . zen_db_input($product_attribute_is_free) . "',							products_attributes_weight = '" . zen_db_input($products_attributes_weight) . "',							products_attributes_weight_prefix = '" . zen_db_input($products_attributes_weight_prefix) . "',							attributes_display_only = '" . zen_db_input($attributes_display_only) . "',							attributes_default = '" . zen_db_input($attributes_default) . "',							attributes_discounted = '" . zen_db_input($attributes_discounted) . "',							attributes_price_base_included = '" . zen_db_input($attributes_price_base_included) . "',							attributes_price_onetime = '" . zen_db_input($attributes_price_onetime) . "',							attributes_price_factor = '" . zen_db_input($attributes_price_factor) . "',							attributes_price_factor_offset = '" . zen_db_input($attributes_price_factor_offset) . "',							attributes_price_factor_onetime = '" . zen_db_input($attributes_price_factor_onetime) . "',							attributes_price_factor_onetime_offset = '" . zen_db_input($attributes_price_factor_onetime_offset) . "',							attributes_qty_prices = '" . zen_db_input($attributes_qty_prices) . "',							attributes_qty_prices_onetime = '" . zen_db_input($attributes_qty_prices_onetime) . "',							attributes_price_words = '" . zen_db_input($attributes_price_words) . "',							attributes_price_words_free = '" . zen_db_input($attributes_price_words_free) . "',							attributes_price_letters = '" . zen_db_input($attributes_price_letters) . "',							attributes_price_letters_free = '" . zen_db_input($attributes_price_letters_free) . "',							attributes_required = '" . zen_db_input($attributes_required) . "'							where products_attributes_id = '" . (int)$attribute_id . "'");								if (DOWNLOAD_ENABLED == 'true') {					$products_attributes_filename = zen_db_prepare_input($info['products_attributes_filename']);					$products_attributes_maxdays = zen_db_prepare_input($info['products_attributes_maxdays']);					$products_attributes_maxcount = zen_db_prepare_input($info['products_attributes_maxcount']);										if (zen_not_null($products_attributes_filename)) {						$db->Execute("replace into " . TABLE_PRODUCTS_ATTRIBUTES_DOWNLOAD . "									set products_attributes_id = '" . (int)$attribute_id . "',									products_attributes_filename = '" . zen_db_input($products_attributes_filename) . "',									products_attributes_maxdays = '" . zen_db_input($products_attributes_maxdays) . "',									products_attributes_maxcount = '" . zen_db_input($products_attributes_maxcount) . "'");					}				}			}		}				// reset products_price_sorter for searches etc.		zen_update_products_price_sorter($info['products_id']);				$return[] = '1';		return parent::prepare_output($return);	}		/**	 * delete a attribute	 *	 * @param string $info	 * @return string	 */	public static function attribute_delete($info) {		$db = parent::prepare_db();		$info = parent::prepare_input($info);		$return = array();				$attribute_id = zen_db_prepare_input($info['attribute_id']);				$db->Execute("delete from " . TABLE_PRODUCTS_ATTRIBUTES . "					where products_attributes_id = '" . (int)$attribute_id . "'");				// added for DOWNLOAD_ENABLED. Always try to remove attributes, even if downloads are no longer enabled		$db->Execute("delete from " . TABLE_PRODUCTS_ATTRIBUTES_DOWNLOAD . "					where products_attributes_id = '" . (int)$attribute_id . "'");				// reset products_price_sorter for searches etc.		zen_update_products_price_sorter($info['products_id']);				$return[] = '1';		return parent::prepare_output($return);	}		/**	 * delete all attribute	 *	 * @param string $products_id	 * @return string	 */	public static function attribute_delete_all($products_id) {		$products_id = parent::prepare_input($products_id);		$products_id = $products_id[0];		$return = array();				zen_delete_products_attributes($products_id);        // reset products_price_sorter for searches etc.        zen_update_products_price_sorter($products_id);                $return[] = '1';        return parent::prepare_output($return);	}		/**	 * copy attribute to another product	 *	 * @param string $info	 * @return string	 */	public static function attribute_copyto_product($info) {		$db = parent::prepare_db();		$info = parent::prepare_input($info);		$return = array();				$copy_attributes_delete_first = ($info['copy_attributes'] == 'copy_attributes_delete' ? '1' : '0');		$copy_attributes_duplicates_skipped = ($info['copy_attributes'] == 'copy_attributes_ignore' ? '1' : '0');		$copy_attributes_duplicates_overwrite = ($info['copy_attributes'] == 'copy_attributes_update' ? '1' : '0');		$products_id_from = $info['products_id_from'];		$products_id_to = $info['products_id_to'];				// Check for errors in copy request		if ( (!zen_has_product_attributes($products_id_from, 'false') or !zen_products_id_valid($products_id_to)) or $products_id_to == $products_id_from ) {			if ($products_id_to == $products_id_from) {				// same products_id				//$messageStack->add_session('<b>WARNING: Cannot copy from Product ID #' . $products_id_from . ' to Product ID # ' . $products_id_to . ' ... No copy was made' . '</b>', 'caution');				return ErrCode::error(API_ATTRIBUTE_WARNING_DUPLICATE_SELF);			} else {				if (!zen_has_product_attributes($products_id_from, 'false')) {					// no attributes found to copy					//$messageStack->add_session('<b>WARNING: No Attributes to copy from Product ID #' . $products_id_from . ' for: ' . zen_get_products_name($products_id_from) . ' ... No copy was made' . '</b>', 'caution');					return ErrCode::error(API_ATTRIBUTE_WARNING_NOTHING);				} else {					// invalid products_id					//$messageStack->add_session('<b>WARNING: There is no Product ID #' . $products_id_to . ' ... No copy was made' . '</b>', 'caution');					return ErrCode::error(API_ATTRIBUTE_WARNING_NO_PRODUCT);				}			}		} else {			// FIX HERE - remove once working						// check if product already has attributes			$check_attributes = zen_has_product_attributes($products_id_to, 'false');						if ($copy_attributes_delete_first=='1' and $check_attributes == true) {				// die('DELETE FIRST - Copying from ' . $products_id_from . ' to ' . $products_id_to . ' Do I delete first? ' . $copy_attributes_delete_first);				// delete all attributes first from products_id_to				zen_products_attributes_download_delete($products_id_to);				$db->Execute("delete from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id = '" . $products_id_to . "'");			}						// get attributes to copy from			$products_copy_from= $db->Execute("select * from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id='" . $products_id_from . "'" . " order by products_attributes_id");						while ( !$products_copy_from->EOF ) {				// This must match the structure of your products_attributes table								$update_attribute = false;				$add_attribute = true;				$check_duplicate = $db->Execute("select * from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id='" . $products_id_to . "'" . " and options_id= '" . $products_copy_from->fields['options_id'] . "' and options_values_id='" . $products_copy_from->fields['options_values_id'] .  "'");				if ($check_attributes == true) {					if ($check_duplicate->RecordCount() == 0) {						$update_attribute = false;						$add_attribute = true;					} else {						if ($check_duplicate->RecordCount() == 0) {							$update_attribute = false;							$add_attribute = true;						} else {							$update_attribute = true;							$add_attribute = false;						}					}				} else {					$update_attribute = false;					$add_attribute = true;				}								// die('UPDATE/IGNORE - Checking Copying from ' . $products_id_from . ' to ' . $products_id_to . ' Do I delete first? ' . ($copy_attributes_delete_first == '1' ? TEXT_YES : TEXT_NO) . ' Do I add? ' . ($add_attribute == true ? TEXT_YES : TEXT_NO) . ' Do I Update? ' . ($update_attribute == true ? TEXT_YES : TEXT_NO) . ' Do I skip it? ' . ($copy_attributes_duplicates_skipped=='1' ? TEXT_YES : TEXT_NO) . ' Found attributes in From: ' . $check_duplicate->RecordCount());								if ($copy_attributes_duplicates_skipped == '1' and $check_duplicate->RecordCount() != 0) {					// skip it					//$messageStack->add_session(TEXT_ATTRIBUTE_COPY_SKIPPING . $products_copy_from->fields['products_attributes_id'] . ' for Products ID#' . $products_id_to, 'caution');				} else {					if ($add_attribute == true) {						// New attribute - insert it						$db->Execute("insert into " . TABLE_PRODUCTS_ATTRIBUTES . " (products_attributes_id, products_id, options_id, options_values_id, options_values_price, price_prefix, products_options_sort_order, product_attribute_is_free, products_attributes_weight, products_attributes_weight_prefix, attributes_display_only, attributes_default, attributes_discounted, attributes_image, attributes_price_base_included, attributes_price_onetime, attributes_price_factor, attributes_price_factor_offset, attributes_price_factor_onetime, attributes_price_factor_onetime_offset, attributes_qty_prices, attributes_qty_prices_onetime, attributes_price_words, attributes_price_words_free, attributes_price_letters, attributes_price_letters_free, attributes_required) values (0, '" . $products_id_to . "',									'" . $products_copy_from->fields['options_id'] . "',									'" . $products_copy_from->fields['options_values_id'] . "',									'" . $products_copy_from->fields['options_values_price'] . "',									'" . $products_copy_from->fields['price_prefix'] . "',									'" . $products_copy_from->fields['products_options_sort_order'] . "',									'" . $products_copy_from->fields['product_attribute_is_free'] . "',									'" . $products_copy_from->fields['products_attributes_weight'] . "',									'" . $products_copy_from->fields['products_attributes_weight_prefix'] . "',									'" . $products_copy_from->fields['attributes_display_only'] . "',									'" . $products_copy_from->fields['attributes_default'] . "',									'" . $products_copy_from->fields['attributes_discounted'] . "',									'" . $products_copy_from->fields['attributes_image'] . "',									'" . $products_copy_from->fields['attributes_price_base_included'] . "',									'" . $products_copy_from->fields['attributes_price_onetime'] . "',									'" . $products_copy_from->fields['attributes_price_factor'] . "',									'" . $products_copy_from->fields['attributes_price_factor_offset'] . "',									'" . $products_copy_from->fields['attributes_price_factor_onetime'] . "',									'" . $products_copy_from->fields['attributes_price_factor_onetime_offset'] . "',									'" . $products_copy_from->fields['attributes_qty_prices'] . "',									'" . $products_copy_from->fields['attributes_qty_prices_onetime'] . "',									'" . $products_copy_from->fields['attributes_price_words'] . "',									'" . $products_copy_from->fields['attributes_price_words_free'] . "',									'" . $products_copy_from->fields['attributes_price_letters'] . "',									'" . $products_copy_from->fields['attributes_price_letters_free'] . "',									'" . $products_copy_from->fields['attributes_required'] . "')");						//$messageStack->add_session(TEXT_ATTRIBUTE_COPY_INSERTING . $products_copy_from->fields['products_attributes_id'] . ' for Products ID#' . $products_id_to, 'caution');					}					if ($update_attribute == true) {						// Update attribute - Just attribute settings not ids						$db->Execute("update " . TABLE_PRODUCTS_ATTRIBUTES . " set									options_values_price='" . $products_copy_from->fields['options_values_price'] . "',									price_prefix='" . $products_copy_from->fields['price_prefix'] . "',									products_options_sort_order='" . $products_copy_from->fields['products_options_sort_order'] . "',									product_attribute_is_free='" . $products_copy_from->fields['product_attribute_is_free'] . "',									products_attributes_weight='" . $products_copy_from->fields['products_attributes_weight'] . "',									products_attributes_weight_prefix='" . $products_copy_from->fields['products_attributes_weight_prefix'] . "',									attributes_display_only='" . $products_copy_from->fields['attributes_display_only'] . "',									attributes_default='" . $products_copy_from->fields['attributes_default'] . "',									attributes_discounted='" . $products_copy_from->fields['attributes_discounted'] . "',									attributes_image='" . $products_copy_from->fields['attributes_image'] . "',									attributes_price_base_included='" . $products_copy_from->fields['attributes_price_base_included'] . "',									attributes_price_onetime='" . $products_copy_from->fields['attributes_price_onetime'] . "',									attributes_price_factor='" . $products_copy_from->fields['attributes_price_factor'] . "',									attributes_price_factor_offset='" . $products_copy_from->fields['attributes_price_factor_offset'] . "',									attributes_price_factor_onetime='" . $products_copy_from->fields['attributes_price_factor_onetime'] . "',									attributes_price_factor_onetime_offset='" . $products_copy_from->fields['attributes_price_factor_onetime_offset'] . "',									attributes_qty_prices='" . $products_copy_from->fields['attributes_qty_prices'] . "',									attributes_qty_prices_onetime='" . $products_copy_from->fields['attributes_qty_prices_onetime'] . "',									attributes_price_words='" . $products_copy_from->fields['attributes_price_words'] . "',									attributes_price_words_free='" . $products_copy_from->fields['attributes_price_words_free'] . "',									attributes_price_letters='" . $products_copy_from->fields['attributes_price_letters'] . "',									attributes_price_letters_free='" . $products_copy_from->fields['attributes_price_letters_free'] . "',									attributes_required='" . $products_copy_from->fields['attributes_required'] . "'"									. " where products_id='" . $products_id_to . "'" . " and options_id= '" . $products_copy_from->fields['options_id'] . "' and options_values_id='" . $products_copy_from->fields['options_values_id'] . "'");									//           . " where products_id='" . $products_id_to . "'" . " and options_id= '" . $products_copy_from->fields['options_id'] . "' and options_values_id='" . $products_copy_from->fields['options_values_id'] . "' and attributes_image='" . $products_copy_from->fields['attributes_image'] . "' and attributes_price_base_included='" . $products_copy_from->fields['attributes_price_base_included'] .  "'");						//$messageStack->add_session(TEXT_ATTRIBUTE_COPY_UPDATING . $products_copy_from->fields['products_attributes_id'] . ' for Products ID#' . $products_id_to, 'caution');					}				}								$products_copy_from->MoveNext();			} // end of products attributes while loop						// reset products_price_sorter for searches etc.			zen_update_products_price_sorter($products_id_to);		} // end of no attributes or other errors				$return[] = '1';		return parent::prepare_output($return);	}		/**	 * copy attribute to a category	 *	 * @param string $info	 * @return string	 */	public static function attribute_copyto_category($info) {		$db = parent::prepare_db();		$info = parent::prepare_input($info);		$return = array();				$copy_attributes_delete_first = ($info['copy_attributes'] == 'copy_attributes_delete' ? '1' : '0');		$copy_attributes_duplicates_skipped = ($info['copy_attributes'] == 'copy_attributes_ignore' ? '1' : '0');		$copy_attributes_duplicates_overwrite = ($info['copy_attributes'] == 'copy_attributes_update' ? '1' : '0');		if ($info['categories_id_to'] == '') {			//$messageStack->add_session(WARNING_PRODUCT_COPY_TO_CATEGORY_NONE . ' ID#' . $_POST['products_filter'], 'warning');			return ErrCode::error(API_WARNING_PRODUCT_COPY_TO_CATEGORY_NONE);		} else {			$copy_to_category = $db->Execute("select products_id from " . TABLE_PRODUCTS_TO_CATEGORIES . " where categories_id='" . $info['categories_id_to'] . "'");			while (!$copy_to_category->EOF) {				//zen_copy_products_attributes($info['$products_id_from'], $copy_to_category->fields['products_id']);				$products_id_from = $info['products_id_from'];				$products_id_to = $copy_to_category->fields['products_id'];				if ( (!zen_has_product_attributes($products_id_from, 'false') or !zen_products_id_valid($products_id_to)) or $products_id_to == $products_id_from ) {					if ($products_id_to == $products_id_from) {						// same products_id						//$messageStack->add_session('<b>WARNING: Cannot copy from Product ID #' . $products_id_from . ' to Product ID # ' . $products_id_to . ' ... No copy was made' . '</b>', 'caution');						//continue;					} else {						if (!zen_has_product_attributes($products_id_from, 'false')) {							// no attributes found to copy							//$messageStack->add_session('<b>WARNING: No Attributes to copy from Product ID #' . $products_id_from . ' for: ' . zen_get_products_name($products_id_from) . ' ... No copy was made' . '</b>', 'caution');							//continue;						} else {							// invalid products_id							//$messageStack->add_session('<b>WARNING: There is no Product ID #' . $products_id_to . ' ... No copy was made' . '</b>', 'caution');							//continue;						}					}				} else {					// FIX HERE - remove once working										// check if product already has attributes					$check_attributes = zen_has_product_attributes($products_id_to, 'false');										if ($copy_attributes_delete_first=='1' and $check_attributes == true) {						// die('DELETE FIRST - Copying from ' . $products_id_from . ' to ' . $products_id_to . ' Do I delete first? ' . $copy_attributes_delete_first);						// delete all attributes first from products_id_to						zen_products_attributes_download_delete($products_id_to);						$db->Execute("delete from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id = '" . $products_id_to . "'");					}										// get attributes to copy from					$products_copy_from= $db->Execute("select * from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id='" . $products_id_from . "'" . " order by products_attributes_id");										while ( !$products_copy_from->EOF ) {						// This must match the structure of your products_attributes table												$update_attribute = false;						$add_attribute = true;						$check_duplicate = $db->Execute("select * from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id='" . $products_id_to . "'" . " and options_id= '" . $products_copy_from->fields['options_id'] . "' and options_values_id='" . $products_copy_from->fields['options_values_id'] .  "'");						if ($check_attributes == true) {							if ($check_duplicate->RecordCount() == 0) {								$update_attribute = false;								$add_attribute = true;							} else {								if ($check_duplicate->RecordCount() == 0) {									$update_attribute = false;									$add_attribute = true;								} else {									$update_attribute = true;									$add_attribute = false;								}							}						} else {							$update_attribute = false;							$add_attribute = true;						}												// die('UPDATE/IGNORE - Checking Copying from ' . $products_id_from . ' to ' . $products_id_to . ' Do I delete first? ' . ($copy_attributes_delete_first == '1' ? TEXT_YES : TEXT_NO) . ' Do I add? ' . ($add_attribute == true ? TEXT_YES : TEXT_NO) . ' Do I Update? ' . ($update_attribute == true ? TEXT_YES : TEXT_NO) . ' Do I skip it? ' . ($copy_attributes_duplicates_skipped=='1' ? TEXT_YES : TEXT_NO) . ' Found attributes in From: ' . $check_duplicate->RecordCount());												if ($copy_attributes_duplicates_skipped == '1' and $check_duplicate->RecordCount() != 0) {							// skip it							$messageStack->add_session(TEXT_ATTRIBUTE_COPY_SKIPPING . $products_copy_from->fields['products_attributes_id'] . ' for Products ID#' . $products_id_to, 'caution');						} else {							if ($add_attribute == true) {								// New attribute - insert it								$db->Execute("insert into " . TABLE_PRODUCTS_ATTRIBUTES . " (products_attributes_id, products_id, options_id, options_values_id, options_values_price, price_prefix, products_options_sort_order, product_attribute_is_free, products_attributes_weight, products_attributes_weight_prefix, attributes_display_only, attributes_default, attributes_discounted, attributes_image, attributes_price_base_included, attributes_price_onetime, attributes_price_factor, attributes_price_factor_offset, attributes_price_factor_onetime, attributes_price_factor_onetime_offset, attributes_qty_prices, attributes_qty_prices_onetime, attributes_price_words, attributes_price_words_free, attributes_price_letters, attributes_price_letters_free, attributes_required) values (0, '" . $products_id_to . "',											'" . $products_copy_from->fields['options_id'] . "',											'" . $products_copy_from->fields['options_values_id'] . "',											'" . $products_copy_from->fields['options_values_price'] . "',											'" . $products_copy_from->fields['price_prefix'] . "',											'" . $products_copy_from->fields['products_options_sort_order'] . "',											'" . $products_copy_from->fields['product_attribute_is_free'] . "',											'" . $products_copy_from->fields['products_attributes_weight'] . "',											'" . $products_copy_from->fields['products_attributes_weight_prefix'] . "',											'" . $products_copy_from->fields['attributes_display_only'] . "',											'" . $products_copy_from->fields['attributes_default'] . "',											'" . $products_copy_from->fields['attributes_discounted'] . "',											'" . $products_copy_from->fields['attributes_image'] . "',											'" . $products_copy_from->fields['attributes_price_base_included'] . "',											'" . $products_copy_from->fields['attributes_price_onetime'] . "',											'" . $products_copy_from->fields['attributes_price_factor'] . "',											'" . $products_copy_from->fields['attributes_price_factor_offset'] . "',											'" . $products_copy_from->fields['attributes_price_factor_onetime'] . "',											'" . $products_copy_from->fields['attributes_price_factor_onetime_offset'] . "',											'" . $products_copy_from->fields['attributes_qty_prices'] . "',											'" . $products_copy_from->fields['attributes_qty_prices_onetime'] . "',											'" . $products_copy_from->fields['attributes_price_words'] . "',											'" . $products_copy_from->fields['attributes_price_words_free'] . "',											'" . $products_copy_from->fields['attributes_price_letters'] . "',											'" . $products_copy_from->fields['attributes_price_letters_free'] . "',											'" . $products_copy_from->fields['attributes_required'] . "')");								//$messageStack->add_session(TEXT_ATTRIBUTE_COPY_INSERTING . $products_copy_from->fields['products_attributes_id'] . ' for Products ID#' . $products_id_to, 'caution');							}							if ($update_attribute == true) {								// Update attribute - Just attribute settings not ids								$db->Execute("update " . TABLE_PRODUCTS_ATTRIBUTES . " set											options_values_price='" . $products_copy_from->fields['options_values_price'] . "',											price_prefix='" . $products_copy_from->fields['price_prefix'] . "',											products_options_sort_order='" . $products_copy_from->fields['products_options_sort_order'] . "',											product_attribute_is_free='" . $products_copy_from->fields['product_attribute_is_free'] . "',											products_attributes_weight='" . $products_copy_from->fields['products_attributes_weight'] . "',											products_attributes_weight_prefix='" . $products_copy_from->fields['products_attributes_weight_prefix'] . "',											attributes_display_only='" . $products_copy_from->fields['attributes_display_only'] . "',											attributes_default='" . $products_copy_from->fields['attributes_default'] . "',											attributes_discounted='" . $products_copy_from->fields['attributes_discounted'] . "',											attributes_image='" . $products_copy_from->fields['attributes_image'] . "',											attributes_price_base_included='" . $products_copy_from->fields['attributes_price_base_included'] . "',											attributes_price_onetime='" . $products_copy_from->fields['attributes_price_onetime'] . "',											attributes_price_factor='" . $products_copy_from->fields['attributes_price_factor'] . "',											attributes_price_factor_offset='" . $products_copy_from->fields['attributes_price_factor_offset'] . "',											attributes_price_factor_onetime='" . $products_copy_from->fields['attributes_price_factor_onetime'] . "',											attributes_price_factor_onetime_offset='" . $products_copy_from->fields['attributes_price_factor_onetime_offset'] . "',											attributes_qty_prices='" . $products_copy_from->fields['attributes_qty_prices'] . "',											attributes_qty_prices_onetime='" . $products_copy_from->fields['attributes_qty_prices_onetime'] . "',											attributes_price_words='" . $products_copy_from->fields['attributes_price_words'] . "',											attributes_price_words_free='" . $products_copy_from->fields['attributes_price_words_free'] . "',											attributes_price_letters='" . $products_copy_from->fields['attributes_price_letters'] . "',											attributes_price_letters_free='" . $products_copy_from->fields['attributes_price_letters_free'] . "',											attributes_required='" . $products_copy_from->fields['attributes_required'] . "'"											. " where products_id='" . $products_id_to . "'" . " and options_id= '" . $products_copy_from->fields['options_id'] . "' and options_values_id='" . $products_copy_from->fields['options_values_id'] . "'");											//           . " where products_id='" . $products_id_to . "'" . " and options_id= '" . $products_copy_from->fields['options_id'] . "' and options_values_id='" . $products_copy_from->fields['options_values_id'] . "' and attributes_image='" . $products_copy_from->fields['attributes_image'] . "' and attributes_price_base_included='" . $products_copy_from->fields['attributes_price_base_included'] .  "'");								//$messageStack->add_session(TEXT_ATTRIBUTE_COPY_UPDATING . $products_copy_from->fields['products_attributes_id'] . ' for Products ID#' . $products_id_to, 'caution');							}						}												$products_copy_from->MoveNext();					} // end of products attributes while loop										// reset products_price_sorter for searches etc.					zen_update_products_price_sorter($products_id_to);				} // end of no attributes or other errors				$copy_to_category->MoveNext();			}		}				$return[] = '1';		return parent::prepare_output($return);	}}?>